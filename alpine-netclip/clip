#!/bin/bash -l

set -eu

pf="/etc/profile.d/clip.sh"
test -e ${pf} && . ${pf} || true
: ${clipdata:="/data/clip"}
: ${clipprog:="/clip"}
test -e ${clipdata}/clipscreen || {
  echo "${clipprog}: ${clipdata}/clipscreen not found" 1>&2
  exit 1
}
export DISPLAY=":$(cat ${clipdata}/clipscreen)"
user="$(cat ${clipdata}/user)"
clipport="$(cat ${clipdata}/clipport)"
sshdir="${HOME}/.ssh"
sshauthkeys="${sshdir}/authorized_keys"
cliphistory=0
cliplogs="${clipdata}/logs"
if [ ! -e ${clipdata}/history ] ; then
  echo 0 > ${clipdata}/history
else
  cliphistory="$(cat ${clipdata}/history)"
fi
test -e ${cliplogs} || mkdir -p ${cliplogs}

test -e ${sshdir} || mkdir -p ${sshdir}
test -e ${sshauthkeys} || touch ${sshauthkeys}
chmod 700 ${sshdir}
chmod 600 ${sshauthkeys}

declare -A cmdinfo
cmdinfo["copy"]="copy stdin to the clipboard"
cmdinfo["paste"]="paste the clipboard to stdout"
cmdinfo["help"]="show this help"
cmdinfo["sc"]="show network copy script"
cmdinfo["sp"]="show network paste script"
cmdinfo["addkey"]="add an ssh key from stdin"
cmdinfo["showpass"]="show password"
cmdinfo["setpass"]="read new password from stdin"
cmdinfo["enhist"]="enable capturing clipboard history"
cmdinfo["dishist"]="disable capturing clipboard history"
cmdinfo["listkeys"]="show known ssh authorized keys"
cmdinfo["delkey"]="read a key number from stdin and delete it"
cmdinfo["netclip"]="show netclip control script"
cmdinfo["install"]="show install script for netclip/sc/sp"
cmdinfo["showuser"]="show the ssh clipboard user"
cmdinfo["showport"]="show the ssh clipboard port"
cmdinfo["delpass"]="delete the stored password file"
cmdinfo["listhist"]="list any existing history entries"
cmdinfo["gethist"]="read a history entry from stdin and show it"
cmdinfo["delhist"]="read a history entry from stdin and delete it"
cmdinfo["clearhist"]="clear all history entries"
cmdinfo["clear"]="clear the contents of the clipboard"
cmdinfo["reap"]="kill any lingering xclip processes"

function usage() {
  local cmdwidth=0
  for cmd in ${!cmdinfo[@]} ; do
    if [ $(echo -n ${cmd} | wc -c) -gt ${cmdwidth} ] ; then
      cmdwidth="$(echo -n ${cmd} | wc -c)"
    fi
  done
  echo "${clipprog}: usage"
  echo
  echo "  ${clipprog} [cmd]"
  echo
  echo "  commands:"
  for cmd in $(echo ${!cmdinfo[@]} | tr ' ' '\n' | sort) ; do
    printf "    %${cmdwidth}s: %s\n" "${cmd}" "${cmdinfo[${cmd}]}"
  done
  echo
}

function copy() {
  local f
  test ${cliphistory} -eq 1 && f="${clipdata}/logs/$(date +%Y%m%d%H%M%S.%N)" || f=/dev/null
  cat /dev/stdin \
  | tee -a ${f} \
  | xclip -in -selection clipboard
}

function paste() {
  xclip -verbose -out -selection clipboard 2>/dev/null || true
}

function sc() {
  echo "#!/bin/bash
: \${clipuser:=${user}}
: \${clipport:=${clipport}}
: \${cliphost:=$(hostname -f)}
cat /dev/stdin | ssh -l \${clipuser} -p \${clipport} \${cliphost} ${clipprog} copy
" | dos2unix
}

function sp() {
  echo "#!/bin/bash
: \${clipuser:=${user}}
: \${clipport:=${clipport}}
: \${cliphost:=$(hostname -f)}
ssh -l \${clipuser} -p \${clipport} \${cliphost} ${clipprog} paste
" | dos2unix
}

function netclip() {
  echo "#!/bin/bash
: \${clipuser:=${user}}
: \${clipport:=${clipport}}
: \${cliphost:=$(hostname -f)}
ssh -l \${clipuser} -p \${clipport} \${cliphost} ${clipprog} \"\${@}\"
" | dos2unix
}

function install() {
  echo "#!/bin/bash
: \${clipuser:=${user}}
: \${clipport:=${clipport}}
: \${cliphost:=$(hostname -f)}
: \${clipinst:=\"\${HOME}/bin\"}
mkdir -p \${clipinst}
rm -f \${clipinst}/{netclip,s{c,p}}
echo '$(netclip)' > \${clipinst}/netclip
echo '$(sc)' > \${clipinst}/sc
echo '$(sp)' > \${clipinst}/sp
chmod 755 \${clipinst}/{netclip,s{c,p}}
" | dos2unix
}

function addkey() {
  local n="${sshdir}/newkey.pub"
  cat /dev/stdin > ${n}
  ssh-keygen -B -f ${n} > /dev/null
  cat ${sshauthkeys} > ${sshauthkeys}.new
  cat ${n} >> ${sshauthkeys}.new
  cat ${sshauthkeys}.new | uniq > ${sshauthkeys}
  rm -f ${sshauthkeys}.new ${n}
  chmod 600 ${sshauthkeys}
}

function showpass() {
  test -e ${clipdata}/passwd && cat ${clipdata}/passwd || true
}

function showuser() {
  echo "${user}" | dos2unix
}

function showport() {
  echo "${clipport}" | dos2unix
}

function setpass() {
  local p="$(cat /dev/stdin | dos2unix)"
  echo "${p}" > ${clipdata}/passwd
  echo "${user}:${p}" | sudo chpasswd
  x11vnc -storepasswd "${p}" ${HOME}/.vnc/passwd
  #killall x11vnc
}

function delpass() {
  rm -f ${clipdata}/passwd
}

function enhist() {
  echo 1 > ${clipdata}/history
}

function dishist() {
  echo 0 > ${clipdata}/history
}

function listkeys() {
  local c=0
  cat ${sshauthkeys} | while IFS="$(printf '\n')" read -r l ; do
    echo ${l} | fold -w 76 | sed "s/^/${c}: /g"
    ((c+=1))
    echo
  done
}

function delkey() {
  local n=$(cat /dev/stdin)
  local c=0
  if [[ ! ${n} =~ ^[0-9]+$ ]] ; then
    echo "${clipprog}: not a number" 1>&2
    exit 1
  fi
  rm -f ${sshauthkeys}.mod
  cat ${sshauthkeys} > ${sshauthkeys}.PRE-$(date +%Y%m%d)
  cat ${sshauthkeys} | while IFS="$(printf '\n')" read -r l ; do
    if [ ! ${n} -eq ${c} ] ; then
      echo ${l}
    fi
    ((c+=1))
  done > ${sshauthkeys}.mod
  cat ${sshauthkeys}.mod > ${sshauthkeys}
  chmod 600 ${sshauthkeys}
}

function listhist() {
  local h
  for h in $(find ${cliplogs}/ -maxdepth 1 -mindepth 1 -type f | sort -n) ; do
    echo "${h##*/}"
  done
}

function delhist() {
  local h="${cliplogs}/$(cat /dev/stdin)"
  test -e ${h} && rm -f ${h} || true
}

function gethist() {
  local h="${cliplogs}/$(cat /dev/stdin)"
  test -e ${h} && cat ${h} || true
}

function clearhist() {
  local h
  for h in $(find ${cliplogs}/ -maxdepth 1 -mindepth 1 -type f | sort -n) ; do
    rm -f "${h}"
  done
}

function clear() {
  echo -n | xclip -in -selection clipboard 
}

function reap() {
set -x
  pidof xclip | xargs echo | xargs kill -KILL >/dev/null 2>&1 || true
}

if [ ${#} -lt 1 ] ; then
  echo "${clipprog}: no command supplied" 1>&2
  usage 1>&2
  exit 1
fi

case "${1}" in
  help) usage ;;
  copy) copy ;;
  paste) paste ;;
  sc) sc ;;
  sp) sp ;;
  addkey) addkey ;;
  showpass) showpass ;;
  setpass) setpass ;;
  enhist) enhist ;;
  dishist) dishist ;;
  listkeys) listkeys ;;
  delkey) delkey ;;
  netclip) netclip ;;
  install) install ;;
  showuser) showuser ;;
  showport) showport ;;
  delpass) delpass ;;
  listhist) listhist ;;
  gethist) gethist ;;
  delhist) delhist ;;
  clearhist) clearhist ;;
  clear) clear ;;
  reap) reap ;;
  *)
    echo "${clipprog}: command ${1} not understood" 1>&2
    usage 1>&2
    exit 1
    ;;
esac
